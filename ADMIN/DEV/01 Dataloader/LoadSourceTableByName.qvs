/**
 * LoadSourceTableByName
 * @param NameSpace String a prefix which will be added to the qvd to separate sources
 * @param TableDomain String the SQL Domain that you wanna laod the data from
 * @param TableAlias String if a Table has a strange name, you can pass a beautified name
 * @param TableName String the name of the table that will be exported
 * @param Historical Boolean if a historical version will be saved on a monthtly basis, pls. check comment!
 * @param FilterCondition
 * @param StorageDivider
 * @version 1.02
 * @author Philipp Frenzel <philipp@frenzel.net>
 */

SUB LoadSourceTableByName(NameSpace, TableDomain, TableAlias, TableName, Historical, FilterCondition, StorageDivider)

LET varTableDomain = TableDomain; 
LET varTableName = TableName;
LET varTableAlias = TableAlias;
LET varNameSpace = NameSpace;
LET varFilterCondition = FilterCondition;
LET varStorageDivider = StorageDivider;
SET varSQLToRun = 'SELECT * FROM $(varTableDomain)$(varTableName)';

IF FilterCondition = '' THEN
    //nothing will be changed
ELSE
    SET varSQLToRun = '$(varSQLToRun) $(varFilterCondition)';
    CALL Qvc.Log('Will Execute: $(varSQLToRun)','INFO');
END IF

QUALIFY "*";

$(varTableAlias):
LOAD *;
SQL $(varSQLToRun);

UNQUALIFY "*";

// Here we store the table as is into the filesystem 
STORE $(varTableAlias) INTO "$(PATH_DATASTAGING)$(varNameSpace)_$(varTableAlias)_$(varStorageDivider).qvd" (qvd);

IF Historical = 1 THEN 
    // ATTENTION, if you save historical data, pls. ensure that a folder with the tablename name exists within the datastaging root folder!
    STORE $(varTableAlias) INTO "$(PATH_DATASTAGING)HISTORY/$(varTableName)/$(varNameSpace)_$(varTableAlias)_$(varStorageDivider)$(VERSIONDATE).qvd" (qvd);
END IF

Let varNoRecords = NoOfRows(varTableAlias);
Let msgLogFile = 'The Table ' & varTableAlias & ' has been loaded with ' & varNoRecords & ' rows.';

//hier schreiben wir einen Kommentar in ein LogFile
CALL Qvc.Log(msgLogFile,'INFO');

IF _DEBUG = 0 THEN
  DROP TABLE $(varTableAlias);
END IF;

END SUB
